/*

There are 1028 squares worth of yard space, if Jenkins wrote ‘FBFBBFFRLR’
We can see the 2 steps ‘FBFBBFF’ | ‘RLR’ 
We can start by ordering the front and back 0 to 127
F means front yard so you cut the yard in half towards the front and look at 0 to 63
B means backyard so you cut the yard in half again towards the backyard 32 to 63
F moves you to 32 to 47
B moves you to 40 to 47
B moves you to 44 to 47
F moves you to 44 to 45
Lastly F tells you that is in row 44
Next we can use the RLR to find the column
R means right half so you move to 4 to 7
L means left so you move to 4 to 5
Lastly R tells you the column is 5

To find the grid number we can just multiply the row by 8 and add the column. 
44 * 8 + 5 = grid 357

That was a lot, let's get to the questions 

Before we can start we need to know where Jenkins stopped. We know he chose randomly but we can find the lowest square and the highest square that Jenkins reached. Find the lowest and the highest squares reached YOU MUST USE THE forEach() method

You start to notic
e a pattern and maybe the digging wasn’t as random as you thought. We know that every number has to be between the highest and lowest but is EVERY number between them? Using either every(), filter(), or some(). Find the missing value between the highest and the lowest. 

You found the number of the square but now you need to find the location in the yard. Working backwards, create a code like ‘FBFBBFFRLR’ and tell me the row and column

You did it, the treasure was in the missing square, always the last place you look… You take the treasure to a safe room and try to get in but there is a lock. There is a 6 digit combination that you need to enter. For every square dug, add the rows and cols to arrays to store them (if you have row 34 col 3 and row 51 col 0 the arrays will be [34, 51] and [3,0]) then using reduce() find the totals of every col and row. Lastly multiply the totals together and drop the zeros, you should have 6 numbers

Next Level:

Using map() create a visual grid of the yard. Use ‘.’ to show not dug and ‘#’ to show dug. 

Deliverables: 

Please turn in any js files that you used 
Copy and paste the code into google doc please to make it easier to grade.
*/

const input = [
  "FBFFBFFRLL",
  "BFFFFBBRLR",
  "FFFBBBBRLR",
  "FBFFFBFLRL",
  "FFBFBFFRRL",
  "FFBBBBFRRR",
  "FBFFBFBLRR",
  "FFBBFBFRRL",
  "FFFFBBFRRL",
  "BFBBBBBLLL",
  "FFBFBFBLLL",
  "FFBFFFBLLL",
  "FBBBFBFRLL",
  "BBFFFBFRRR",
  "FFFBFBBLLR",
  "FBFBFBFRRR",
  "BBFFBFBRLL",
  "FBFBBBBLRL",
  "FBFFFFFLLL",
  "BFFFFFFRLL",
  "BFFFBFBLRL",
  "BFBBBFBRRL",
  "BFFFBFFRRL",
  "FBFFFFFRRR",
  "FFBBBBBLLR",
  "BFBBFFBLRL",
  "FBBFBBBRLR",
  "BFBFBFFRLL",
  "BFBFBFBRLL",
  "BFFBFBFLLL",
  "FFBBFFBLRL",
  "FBBFFBFLRR",
  "FBBBFBBRRR",
  "BFBFFBFRLR",
  "BFBBBFBLLL",
  "FFBFBBBLRR",
  "BFBFFBFLLL",
  "FBFBFBBLLL",
  "BFBBBFBLRL",
  "FBFBFBFLRL",
  "FFBFFBFRRL",
  "FBBFFBFLLL",
  "BFBBBBBLRL",
  "FBBBBBFRLR",
  "BFFFBBFRLL",
  "FBBBBFFLLR",
  "FBBBBBFRLL",
  "BFBBBFFRLR",
  "BFBBBFBRLL",
  "BFFFBFFLLL",
  "FFFBFBFLRL",
  "BFFBBFFLRL",
  "BBFFFBFRLL",
  "BFBBFFBRLR",
  "BFBFBFBRRL",
  "BBFFFBFRRL",
  "FBBFBBBLRR",
  "FFBFBBBLLL",
  "BFFFBFBRLR",
  "FFBBFBBLLL",
  "FBFBBFBLLL",
  "BFBBFBFLLR",
  "FFBFBBBRRL",
  "FFBFFFFLRL",
  "FFFBBFFLRR",
  "FBBBBBFRRR",
  "FFFFBBBRLL",
  "BFBFBBBRRR",
  "BBFFBFBRRL",
  "FBFBBFFRLR",
  "FBBFFBFRRR",
  "BBFFBFBRRR",
  "FBFBBFBLRR",
  "FBBFFBBLRR",
  "FBBBBFFRLL",
  "BFBFFFBRLR",
  "FBFBBFBRRL",
  "FFBFBBFRRR",
  "FBFBFFFRLL",
  "BFBBFFBLLR",
  "FBFFFFBRLR",
  "BFBBBFFRLL",
  "FFBBFFBRLR",
  "FFFBBFBRLL",
  "FBBBBBBLRR",
  "FBFFBBBLRR",
  "BFFFFBFLRL",
  "BBFFFFFLRR",
  "BFFBFFBLLR",
  "FFBBBFFRLL",
  "BFBFBFBRLR",
  "FBBFBFBLRR",
  "FBFBBBFRLR",
  "FBFFBBBRRR",
  "FBBFFBFRLL",
  "FBBBFFFRLR",
  "BFBBBBFLLR",
  "BFFFBFFLLR",
  "FFBFFFBRRR",
  "FBFFFBFLLR",
  "FFFFBBBLLR",
  "BFBFFFBRLL",
  "BFFBBFBLRL",
  "BFFBFBFLLR",
  "FFBFFBFRLR",
  "BFBFFFBRRL",
  "FFBBFBFLLL",
  "BFBBBBBRLR",
  "BFBFBFBLRR",
  "FBFFBFBLLR",
  "FBFBFBBRRL",
  "BFBFBBBLLL",
  "FFBBFBBLRL",
  "FBFFFBFRRL",
  "BFBBFFFLRR",
  "BFBFBBFRRR",
  "FBFFFFBLRL",
  "BBFFBBFRRR",
  "FFBFFBBRLR",
  "FBBFBFBLRL",
  "BFBFFFBRRR",
  "FFFBBBFLRL",
  "BFFBFFBRLL",
  "FBFBFFBLRR",
  "FFBFBBFLLL",
  "FFBBBFFLRL",
  "FFBBFFFRLR",
  "BBFFBFBLRL",
  "FFFFBBFRLR",
  "FFFBFFBLRR",
  "BFFBBBFLLR",
  "BFFFBBBRRL",
  "FBBFBFBRLL",
  "BFFBFFFRRR",
  "BBFFFFFLRL",
  "BBFFFBBRLL",
  "BFFFBBBRRR",
  "BFFFBBBLRL",
  "BBFFBFFRRR",
  "BFFBFFBLRL",
  "FBBBBFBRLR",
  "FFFBFBFRRL",
  "BFFBBBBRRL",
  "FBBBBBFLRR",
  "FBFBBBBLLR",
  "FBBBBFBLRR",
  "FFFBFFBRLL",
  "FFBBBBFLLR",
  "FFBBBBBRRL",
  "FBBFFFFLLL",
  "FBFFBBBRLL",
  "FBFBFFBLLR",
  "FBBBBBFRRL",
  "BFFFBFBLLL",
  "FFFBFFFLRL",
  "FFFFBBFRLL",
  "BFBBFFFRLR",
  "BFFFBBBRLR",
  "FFBBBFBLLR",
  "BFFFBFBRRR",
  "BFFBFBBLRL",
  "FFBFBFBLRR",
  "FBBBBFBRRR",
  "FFBFBFFLLR",
  "BBFFFFFLLR",
  "FBBBFBFRRR",
  "BBFFFFBRRL",
  "FBFBFBBLRL",
  "BFBBBFFLLR",
  "BBFFBBFLRL",
  "BFBFFBBRLR",
  "FBFBBBFRRL",
  "FBBBFFBRLL",
  "BBFFFFBLLR",
  "FFBBFBBLRR",
  "FBBBBBBRLR",
  "FFFFBBBRRL",
  "FBFBBBBRLR",
  "BBFFBFFRRL",
  "FBBBFFBLRL",
  "FFBBBFBLRR",
  "BFBFBBBRLL",
  "FBFFFBBLRL",
  "FBFBBBBRLL",
  "BBFFFBBLLL",
  "BFBBFFBLLL",
  "BFFBBBBRRR",
  "FBFBFFBLLL",
  "FBFBFBFRRL",
  "FBBFFFBLLL",
  "BBFFFBFRLR",
  "FBBBBFFLRR",
  "FBFFFBBRLL",
  "FFBBFBFRRR",
  "FBFFFFFLRR",
  "BFBFFBBLRR",
  "FFBFBFFRRR",
  "BFBFFBBRLL",
  "FBBFFFFRRL",
  "BFFBBFBRLL",
  "BFFFFFBLLR",
  "FBFBBFBLLR",
  "BFFBBFBRLR",
  "BFFBFBFRRR",
  "FFBFBBFRLL",
  "FFFBBBBLRR",
  "BFFFBFBLLR",
  "FBBBBFBLRL",
  "FBFBBFFLRL",
  "FFFBFFFRLL",
  "BFFFFBBRRL",
  "FBBFFFBRRR",
  "FBBFBFFLLR",
  "BFBBBBBRRR",
  "BFFBFBFRLL",
  "FFBFBBFRRL",
  "BFBFBFBLLR",
  "FFBFBBFLLR",
  "FFBFFFFLRR",
  "FBBBFBBRRL",
  "BFFBFBFRLR",
  "BFFBFFBRRL",
  "BFBBBFBRLR",
  "BBFFFFBLRL",
  "FBBBFFBRRL",
  "FBFFFBBRRL",
  "FBBBBBBLLL",
  "FFFBFFBLLL",
  "BFBBFBFRLL",
  "FBFBFFBRLR",
  "FFFFBBBRRR",
  "BBFFFBBRLR",
  "BFBBBBFRLR",
  "FBFFBBFLRR",
  "BFFFBFFRLR",
  "FFFBBBBLLR",
  "FBFFFFBLRR",
  "FBFBFBBRLL",
  "FBFFBBBRLR",
  "BFFFFFFLRR",
  "FBFFFFFRLL",
  "FFBFBFFRLL",
  "FFFBBFFRLR",
  "FBBFBFFRRL",
  "FBBBBBBRRR",
  "BFBFBBBLRL",
  "BBFFFFBRRR",
  "FFBFFBBLRL",
  "FBBBBBBLLR",
  "FFBBFFFLRL",
  "FBBBFBBLRR",
  "FFBBBBBRLR",
  "BFBFFFFLLR",
  "BFFBBBBRLL",
  "BFBFBFFLRL",
  "FBBFFFBLRL",
  "BFBFBBBRRL",
  "BFBFBFBLRL",
  "BFBBFBFLRR",
  "BFFFFBFRLR",
  "BFFFBFBRLL",
  "FBFBFBFLLL",
  "FBFFBFFLRL",
  "BFFFFFFRRL",
  "FBBFBFFRLR",
  "FFBBBFFLLR",
  "FBBBBFFLRL",
  "FBBBFBBRLR",
  "BFBBBFFLRL",
  "FBFFBBBLRL",
  "BFFFFBFRRL",
  "BFFFBFFLRR",
  "FFBFBBFLRL",
  "BFBFFFBLRL",
  "BFFFFFBLLL",
  "FBFFBFBLLL",
  "FBFBBBBRRL",
  "FBBFFBBRLR",
  "BFFFBBFRRL",
  "BFBBFBBRLR",
  "FFFBFBBLRR",
  "FFFBFBFRLR",
  "FBFBFBFRLR",
  "BFBFBBBRLR",
  "BFFFFBBLLL",
  "BFFBBFBRRR",
  "BFFBBBFLLL",
  "FFBBBFFRRL",
  "BFBBBFBLLR",
  "FBBFFBBLLR",
  "FBBFBBFLRL",
  "BFFFFFBRRR",
  "FBBBFBBRLL",
  "FBFBFFBRRR",
  "BFFBBBFRRR",
  "FBBBBBBLRL",
  "FFBBBFFLRR",
  "BFFBBBFRLL",
  "BBFFBBFRLL",
  "FBBFBBFRLR",
  "BFBFBFFRRR",
  "BFBFBBFLRL",
  "BFFFFBFRLL",
  "FFBBFBFLLR",
  "BFFBFBBLRR",
  "FBFFBBBRRL",
  "FBBFBBFRLL",
  "FBFFFBBLLR",
  "FFFBBBBRRR",
  "FFFFBBBLRL",
  "FFBBFFFRRL",
  "BFFBBFFRRL",
  "BFFFBBFLRL",
  "BFFFFBBLRR",
  "BBFFBBBLRR",
  "BFBFFFFLRR",
  "FBFBBBBLLL",
  "BBFFFBBLRR",
  "FFFBFBFLRR",
  "FBBFFFFLRL",
  "FFBBBBFRLL",
  "FBFFBFBLRL",
  "BFBBFBBLLL",
  "FBBFBBFLLL",
  "FFBFFBBRLL",
  "BFBFFFFRLR",
  "FBFFBBFRRR",
  "FFFBBFFRRR",
  "FFFBFFBRLR",
  "FBBBBBFLLL",
  "FBBBFFFLRL",
  "FFBBFFFLRR",
  "FFFBBBBRRL",
  "BFBFBBFRLL",
  "BFBFFBBRRL",
  "FBBFBBFRRL",
  "BFBFBBFLLR",
  "BBFFBBBRRR",
  "BFFFBBFRLR",
  "FFFBBBFRLR",
  "BFFBFFFRLL",
  "BFBFFFFRRL",
  "FFBBFFFLLL",
  "FBFBBBBLRR",
  "FBFBFFFLRR",
  "BBFFBFFLRR",
  "FBBBFBBLRL",
  "BFBFBFBLLL",
  "FBFBFFFLLR",
  "BFFBBFBLRR",
  "FBBFFFBRRL",
  "BFFBBFFRRR",
  "FBBFBBBRRL",
  "BFFFFBBLLR",
  "FFBBBBFLLL",
  "BFFBFFBRRR",
  "BFFFFBFRRR",
  "FFFBBBFRRR",
  "FBFBFFFRLR",
  "FBBBFBFLLR",
  "FFBBFFBRLL",
  "FBFBFFFLLL",
  "BFFBFBFRRL",
  "BFBFFBFRRL",
  "BFBBBBFLLL",
  "FBBBFBFRRL",
  "FFBFBFFLLL",
  "BFBBFFFRRL",
  "FFBBFFBLLR",
  "BFFBBBBRLR",
  "FFBBBBBLRR",
  "BFFBFFFRRL",
  "BFFBFBBRLL",
  "FBBBFBFRLR",
  "FBBFFFFLRR",
  "BFFFBBFLLR",
  "FFFBBFBRRL",
  "FFBBFFBLRR",
  "FBBFFFBRLR",
  "BFBBBBBRLL",
  "BBFFFFFRRL",
  "FFBFFBBRRL",
  "BFBFFBFLLR",
  "FBFBBBFLLL",
  "FBFFFFFRRL",
  "BFFFBFBLRR",
  "FBFFFFBLLR",
  "FBBFBFBRRR",
  "FBBBFFFLLR",
  "BBFFBFBLRR",
  "BBFFFBFLLL",
  "FBFFFBFRLR",
  "BFFFBFFLRL",
  "BBFFBFFLRL",
  "BFFFFFFLLR",
  "BBFFBBBLLL",
  "FFBFBBBLLR",
  "FBBFBBBLRL",
  "BFBBFBBLRR",
  "FFBFBFBLLR",
  "FFBFBFBRRL",
  "BFBBFBBRRL",
  "BFFBFFFLLR",
  "FFBBFFBRRL",
  "BBFFBBBRRL",
  "FFFBBFBRLR",
  "BFBBFBFRRR",
  "BFFFFFFRRR",
  "FBBBFFBLLL",
  "BFBFFFFLLL",
  "BBFFBFBLLR",
  "BFBFBBFRLR",
  "FFBFBBBRRR",
  "BFFFBBFLLL",
  "FBFFBBFRLL",
  "FFBBFBFRLL",
  "BFBFBBBLLR",
  "FBBFBFBLLL",
  "BBFFFFBRLL",
  "BBFFBFBLLL",
  "BFFBFFBLRR",
  "BFFBBFBLLL",
  "FFBFFFBLRR",
  "FBBFFBFRRL",
  "FBBBBFBLLL",
  "FFBFFBBLLR",
  "BFFBBBFLRR",
  "FBFBFFBRLL",
  "FFBFFFBRLL",
  "FFBFFBFLLL",
  "FBFBBFBLRL",
  "FBBFBFFRRR",
  "BFBFBFFLLR",
  "FBBFFFBLLR",
  "BFBBBBFRRR",
  "FBBFBBFRRR",
  "BBFFBFFRLR",
  "FBFBBBFRLL",
  "FBBFBBBLLR",
  "BFFFFFFLRL",
  "BFBFFBBRRR",
  "BFFFBFFRLL",
  "BFBBFBFLRL",
  "FFBFFFFRRR",
  "BFFBBFFRLR",
  "FBBBBBFLLR",
  "FBFBFFBLRL",
  "FFFBBFBLLR",
  "FBBFBFBLLR",
  "FFFBFFBRRR",
  "FBFFFFFRLR",
  "FBFBBFBRLR",
  "FBBBFBFLRR",
  "FBFBBBFLRL",
  "BFFBFFFLRL",
  "FFBBBFFRRR",
  "FFBBBBBLLL",
  "FBFFBBFLLR",
  "FFBFBFFLRR",
  "FFFBBBFLRR",
  "BFBFBBFLLL",
  "BBFFBFFLLR",
  "FFBBFBBRLL",
  "FBBFFBBLLL",
  "FBFFBFBRLL",
  "BFBFBFFLRR",
  "FBBBFFBRLR",
  "FFBFFBFRLL",
  "FFFFBBBLLL",
  "FFBFFBBRRR",
  "FBBBBFBRLL",
  "BFFFFBBRRR",
  "FFBBFFFRLL",
  "FFBFBFBRLL",
  "BBFFFFBLLL",
  "FFBBBFBRRL",
  "BFFFFBBLRL",
  "FBBBFBBLLR",
  "FBBBFBBLLL",
  "FFBFBFBLRL",
  "FBBBBFFRRR",
  "FBBFFFFRLR",
  "FFBFFFBRLR",
  "BFBFBFBRRR",
  "FFFBFBBRLL",
  "FBBBFFBRRR",
  "FBBFBFFRLL",
  "BFFBFBFLRR",
  "BFBBBFFRRL",
  "BFFBBFBLLR",
  "FFBBBFBRLL",
  "FBFBFBBLRR",
  "BFBBFFFLRL",
  "BFBFBBFLRR",
  "BFBBBFFRRR",
  "FBBBFFFRRL",
  "FBFBFBFLLR",
  "FBBFFFFLLR",
  "FFBFBBFRLR",
  "FFFBFBBLRL",
  "BBFFFBBLLR",
  "BFFBBBFRLR",
  "FFFFBBBRLR",
  "BBFFBBFRLR",
  "FBFFFFBRLL",
  "FBFBFFFRRR",
  "FBFFFBBLLL",
  "BFBBBBFRLL",
  "FBFBFFBRRL",
  "FFFBFFFRLR",
  "BFBBFBFRRL",
  "FBFFBFFLRR",
  "FBFFFBBLRR",
  "FFBFBBBRLR",
  "FBBFBFFLRR",
  "FBFFFBBRRR",
  "FFBFBBBRLL",
  "FFBBBBBRRR",
  "BFFBBFFLLL",
  "BFBBBBBRRL",
  "BBFFBBBRLL",
  "FBFFFFFLRL",
  "BFFBBFFLRR",
  "FBFFBBFLRL",
  "BFBFFBFRRR",
  "FBFBBFBRLL",
  "BFFFBFBRRL",
  "FBBFFBFLLR",
  "BFFFFFFLLL",
  "FBFBFBFRLL",
  "FBBBBFFRRL",
  "BFBFFBBLLR",
  "FBBFBFBRRL",
  "FFFBFFFLLR",
  "FFBBBBBLRL",
  "FFBFFBBLRR",
  "FFFBFBFRRR",
  "BFBBFBBRLL",
  "BFBBBFBLRR",
  "FFBBBBFLRR",
  "FBBBFFBLLR",
  "BBFFBBBLLR",
  "FBFBBFFRRL",
  "FBBBBBFLRL",
  "FFFBBFFRRL",
  "BFFBBBBLRR",
  "FFFFBBBLRR",
  "FFFFBBFLRR",
  "FBFFFBFLLL",
  "FBFBFBBLLR",
  "BFFBBBBLLL",
  "FFBFFFFRLR",
  "BFBBFFBLRR",
  "FFBBFBFLRL",
  "BFBFBFFLLL",
  "BFFBFBBLLR",
  "BFBBFBBLRL",
  "FFBBBBFLRL",
  "FBBBFFFLLL",
  "FFFBFFBRRL",
  "BFFFFBBRLL",
  "BFFFBBBRLL",
  "BFFBFFFLRR",
  "FFBFBFBRRR",
  "BBFFBBFLLR",
  "FFBBFBBLLR",
  "FFBFFBFRRR",
  "FFBBBFFRLR",
  "BFFBBBBLLR",
  "FFFBFFFLRR",
  "FBFFFFFLLR",
  "FBFFBBBLLL",
  "BBFFBBFLLL",
  "FFBBFBFLRR",
  "BFFBFBFLRL",
  "FBFBBBFRRR",
  "BFBBFBBLLR",
  "FBFFFFBRRL",
  "FFFBBFBLRR",
  "BBFFFFBLRR",
  "BFBBBBFRRL",
  "FFBBBFBLLL",
  "BFBBFBFRLR",
  "BFBBFFBRRL",
  "BFBFBFFRRL",
  "FBBFFBBLRL",
  "FFFBFFBLRL",
  "BFFBBFFRLL",
  "FBBBFFFRLL",
  "FBBFBBFLLR",
  "FFBFFFFLLR",
  "FBBBFBFLRL",
  "BFFFBBBLLR",
  "FBFBBBBRRR",
  "FBBFBFBRLR",
  "FFFBFBFLLR",
  "FFFFBBFRRR",
  "FFFBBFFLRL",
  "BFBFFBFRLL",
  "FFFBFFBLLR",
  "FBBFFFBRLL",
  "FFBBBFBRRR",
  "FFBBFBBRLR",
  "BBFFFFFRRR",
  "FFBFFFFRLL",
  "FBBFFBBRRL",
  "BBFFFBFLRR",
  "FBBFFFFRRR",
  "FFBFFFBRRL",
  "BFBBFBFLLL",
  "BFFFFBFLRR",
  "BBFFFFFLLL",
  "FFBBFBBRRL",
  "FFBFBFFLRL",
  "FBFFBBFRRL",
  "BBFFBFBRLR",
  "BBFFBBFLRR",
  "FBFFBFBRRR",
  "FBBFBBFLRR",
  "FBFFFBFRLL",
  "BFBFFFFLRL",
  "FFFBBFBRRR",
  "BFBBBBBLLR",
  "FBBFFBBRRR",
  "FFBBBFFLLL",
  "FBBBBFBLLR",
  "BBFFFFFRLL",
  "FFBBBBFRLR",
  "FBFBFBBRRR",
  "FBFFBFFLLL",
  "FBFFBBBLLR",
  "FBBBBFBRRL",
  "BFBFBFFRLR",
  "FBBFBBBRLL",
  "BFBBFFFRLL",
  "FBBBFBFLLL",
  "FFBFFFFRRL",
  "FBFBBFFRRR",
  "FBFFFFBLLL",
  "FBBBBBBRLL",
  "BFFBFBBRRR",
  "BBFFBBFRRL",
  "FBBFBFFLRL",
  "FBFFFFBRRR",
  "FBBFFFFRLL",
  "FFFBFFFRRR",
  "FBFFBBFLLL",
  "BFFFFBFLLL",
  "BFFFFBFLLR",
  "FFBFFBFLLR",
  "FFBFFBFLRR",
  "BFFBBBBLRL",
  "FFBBFFBLLL",
  "FBBFBBBLLL",
  "FBFBBBFLLR",
  "BFFBBBFLRL",
  "BFBBFFBRLL",
  "FBFFBFFRRR",
  "FFBFFFBLRL",
  "FFFBBBFRRL",
  "FFBFBBFLRR",
  "FFFBBBBLRL",
  "FFFBBFFLLL",
  "FFFBFBBRRR",
  "FBBFBFFLLL",
  "BFFFBBBLLL",
  "BFFBFFFRLR",
  "FFFBBBBLLL",
  "BFFFFFBRRL",
  "FFBBFFFLLR",
  "BFBBFFFRRR",
  "BFBFFBFLRR",
  "FFFBBBFLLR",
  "FBFBBBFLRR",
  "BBFFBBBRLR",
  "FBFBBFFLRR",
  "FFBBBFBLRL",
  "FFFBBBFRLL",
  "BFFBFFBRLR",
  "BBFFFBBRRR",
  "BFBBBBFLRL",
  "BFBBBFBRRR",
  "FBBBBFFLLL",
  "FFFBFBBLLL",
  "BBFFFFFRLR",
  "BBFFBFFLLL",
  "FFBFBBBLRL",
  "FFBBFBFRLR",
  "BFBBBBBLRR",
  "FFBFFFBLLR",
  "FFBFFBFLRL",
  "BFFBFBBRLR",
  "FBFBFFFRRL",
  "FBBBFFFLRR",
  "FFFBBFFLLR",
  "FBBBBFFRLR",
  "FFBBFBBRRR",
  "BFBBFBBRRR",
  "BFBFBBFRRL",
  "BFFBBBFRRL",
  "FFFBFFFLLL",
  "FBBFFBFLRL",
  "FFFBFBBRLR",
  "BFBBFFFLLR",
  "BFBBFFBRRR",
  "FBFFBFBRRL",
  "FFBBBBBRLL",
  "BFFBFFBLLL",
  "BFFFBBFRRR",
  "FBFFFBFRRR",
  "FFBFBFBRLR",
  "FBFBBFFLLR",
  "FBBFBBBRRR",
  "BFBFFFFRRR",
  "FFBFFFFLLL",
  "FBFBBFFRLL",
  "BFBFFBFLRL",
  "BFBBFFFLLL",
  "FBFBBFBRRR",
  "BFBFFFBLLR",
  "BFBFFFBLLL",
  "BBFFFBFLLR",
  "BBFFBFFRLL",
  "FFBBBBFRRL",
  "BBFFFBFLRL",
  "BBFFBBBLRL",
  "BFBFFFBLRR",
  "FFFBFBFRLL",
  "BFBFFBBLLL",
  "BBFFFBBRRL",
  "BFBBBFFLLL",
  "BFFBBFFLLR",
  "FFBFFBBLLL",
  "BFFBBFBRRL",
  "BFFFFFBLRL",
  "BBFFFFBRLR",
  "FBFBBFFLLL",
  "FFBBBFBRLR",
  "FFFBBFBLLL",
  "FBFFFBBRLR",
  "FFBFBFFRLR",
  "BFFFFFBLRR",
  "FFFBBBBRLL",
  "FFBBFFFRRR",
  "BFFFFFBRLR",
  "FBBBFFBLRR",
  "FBFBFBBRLR",
  "FBBFFFBLRR",
  "BFBFFBBLRL",
  "FBFFBFBRLR",
  "FBFBFFFLRL",
  "BFFFFFBRLL",
  "BFBBBBFLRR",
  "BFFBFFFLLL",
  "FBFFBFFRRL",
  "FFFBBFFRLL",
  "BFFFBFFRRR",
  "FBFFBFFLLR",
  "FFFBBBFLLL",
  "FBFFFBFLRR",
  "BFFBFBBLLL",
  "BFFFBBBLRR",
  "FBBBBBBRRL",
  "FBFFBFFRLR",
  "FBBFFBBRLL",
  "FBBBFFFRRR",
  "BFFBFBBRRL",
  "FFBBFFBRRR",
  "BFBBBFFLRR",
  "FFFBFBBRRL",
  "BFBFBBBLRR",
  "FFFBBFBLRL",
  "FBFFBBFRLR",
  "BFFFBBFLRR",
  "BBFFFBBLRL",
  "FBBFFBFRLR",
  "FFFBFBFLLL",
  "FFFBFFFRRL",
  "BBFBFFFLLL",
  "FBFBFBFLRR",
  "BFBFFFFRLL",
];

let input1 = input.split([7]).map(input1)
// Print input array
console.log('Input:', input);

// Find min and max rows
const rows = [];
const cols = []; 

input1.forEach(str => {
  // Parse row/col
  const row = parseRowCol(str)[0];  
  const col = parseRowCol(str)[1];

  rows.push(row);
  cols.push(col);
});

console.log('Rows:', rows);
console.log('Cols:', cols);

const minRow = Math.min(...rows);
const maxRow = Math.max(...rows);

console.log('Min row:', minRow); 
console.log('Max row:', maxRow);

// Find missing row
const missingRow = findMissingRow(minRow, maxRow, rows);
console.log('Missing row:', missingRow);

// Generate code
const code = generateCode(44, 5);
console.log('Code:', code);

// Calculate lock combo
const combo = calculateLockCombo(rows, cols);
console.log('Combo:', combo);

// Print grid
console.log(printGrid(rows, cols));

// Helper functions
function parseRowCol(str) {
  const rowBits = str.slice(0, 4).join('');
  const colBits = str.slice(4, 7).join(''); 

  return [parseInt(rowBits, 2), parseInt(colBits, 2)];
}

function findMissingRow(min, max, rows) {
  let values = [];
  for (let i = min; i <= max; i++) {
    values.push(i);
  }

  return values.filter(val => !rows.includes(val))[0];
}

function generateCode(row, col) {
  let rowBits = row.toString(2).padStart(4, '0');
  let colBits = col.toString(2).padStart(3, '0');
  return rowBits + colBits;
}

function calculateLockCombo(rows, cols) {
  const rowTotal = rows.reduce((a, b) => a + b, 0);
  const colTotal = cols.reduce((a, b) => a + b, 0);
  
  return (rowTotal * colTotal).toString().slice(0,6); 
}

function printGrid(rows, cols) {
  const grid = Array(64).fill('.').join('').split('');

  rows.forEach((row, i) => {
    const col = cols[i];
    const index = row * 8 + col;
    grid[index] = '#';
  });

  return grid.join('').match(/.{8}/g).join('\n');
}
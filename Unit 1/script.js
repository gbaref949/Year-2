const input = [
  "FBFFBFFRLL",
  "BFFFFBBRLR",
  "FFFBBBBRLR",
  "FBFFFBFLRL",
  "FFBFBFFRRL",
  "FFBBBBFRRR",
  "FBFFBFBLRR",
  "FFBBFBFRRL",
  "FFFFBBFRRL",
  "BFBBBBBLLL",
  "FFBFBFBLLL",
  "FFBFFFBLLL",
  "FBBBFBFRLL",
  "BBFFFBFRRR",
  "FFFBFBBLLR",
  "FBFBFBFRRR",
  "BBFFBFBRLL",
  "FBFBBBBLRL",
  "FBFFFFFLLL",
  "BFFFFFFRLL",
  "BFFFBFBLRL",
  "BFBBBFBRRL",
  "BFFFBFFRRL",
  "FBFFFFFRRR",
  "FFBBBBBLLR",
  "BFBBFFBLRL",
  "FBBFBBBRLR",
  "BFBFBFFRLL",
  "BFBFBFBRLL",
  "BFFBFBFLLL",
  "FFBBFFBLRL",
  "FBBFFBFLRR",
  "FBBBFBBRRR",
  "BFBFFBFRLR",
  "BFBBBFBLLL",
  "FFBFBBBLRR",
  "BFBFFBFLLL",
  "FBFBFBBLLL",
  "BFBBBFBLRL",
  "FBFBFBFLRL",
  "FFBFFBFRRL",
  "FBBFFBFLLL",
  "BFBBBBBLRL",
  "FBBBBBFRLR",
  "BFFFBBFRLL",
  "FBBBBFFLLR",
  "FBBBBBFRLL",
  "BFBBBFFRLR",
  "BFBBBFBRLL",
  "BFFFBFFLLL",
  "FFFBFBFLRL",
  "BFFBBFFLRL",
  "BBFFFBFRLL",
  "BFBBFFBRLR",
  "BFBFBFBRRL",
  "BBFFFBFRRL",
  "FBBFBBBLRR",
  "FFBFBBBLLL",
  "BFFFBFBRLR",
  "FFBBFBBLLL",
  "FBFBBFBLLL",
  "BFBBFBFLLR",
  "FFBFBBBRRL",
  "FFBFFFFLRL",
  "FFFBBFFLRR",
  "FBBBBBFRRR",
  "FFFFBBBRLL",
  "BFBFBBBRRR",
  "BBFFBFBRRL",
  "FBFBBFFRLR",
  "FBBFFBFRRR",
  "BBFFBFBRRR",
  "FBFBBFBLRR",
  "FBBFFBBLRR",
  "FBBBBFFRLL",
  "BFBFFFBRLR",
  "FBFBBFBRRL",
  "FFBFBBFRRR",
  "FBFBFFFRLL",
  "BFBBFFBLLR",
  "FBFFFFBRLR",
  "BFBBBFFRLL",
  "FFBBFFBRLR",
  "FFFBBFBRLL",
  "FBBBBBBLRR",
  "FBFFBBBLRR",
  "BFFFFBFLRL",
  "BBFFFFFLRR",
  "BFFBFFBLLR",
  "FFBBBFFRLL",
  "BFBFBFBRLR",
  "FBBFBFBLRR",
  "FBFBBBFRLR",
  "FBFFBBBRRR",
  "FBBFFBFRLL",
  "FBBBFFFRLR",
  "BFBBBBFLLR",
  "BFFFBFFLLR",
  "FFBFFFBRRR",
  "FBFFFBFLLR",
  "FFFFBBBLLR",
  "BFBFFFBRLL",
  "BFFBBFBLRL",
  "BFFBFBFLLR",
  "FFBFFBFRLR",
  "BFBFFFBRRL",
  "FFBBFBFLLL",
  "BFBBBBBRLR",
  "BFBFBFBLRR",
  "FBFFBFBLLR",
  "FBFBFBBRRL",
  "BFBFBBBLLL",
  "FFBBFBBLRL",
  "FBFFFBFRRL",
  "BFBBFFFLRR",
  "BFBFBBFRRR",
  "FBFFFFBLRL",
  "BBFFBBFRRR",
  "FFBFFBBRLR",
  "FBBFBFBLRL",
  "BFBFFFBRRR",
  "FFFBBBFLRL",
  "BFFBFFBRLL",
  "FBFBFFBLRR",
  "FFBFBBFLLL",
  "FFBBBFFLRL",
  "FFBBFFFRLR",
  "BBFFBFBLRL",
  "FFFFBBFRLR",
  "FFFBFFBLRR",
  "BFFBBBFLLR",
  "BFFFBBBRRL",
  "FBBFBFBRLL",
  "BFFBFFFRRR",
  "BBFFFFFLRL",
  "BBFFFBBRLL",
  "BFFFBBBRRR",
  "BFFFBBBLRL",
  "BBFFBFFRRR",
  "BFFBFFBLRL",
  "FBBBBFBRLR",
  "FFFBFBFRRL",
  "BFFBBBBRRL",
  "FBBBBBFLRR",
  "FBFBBBBLLR",
  "FBBBBFBLRR",
  "FFFBFFBRLL",
  "FFBBBBFLLR",
  "FFBBBBBRRL",
  "FBBFFFFLLL",
  "FBFFBBBRLL",
  "FBFBFFBLLR",
  "FBBBBBFRRL",
  "BFFFBFBLLL",
  "FFFBFFFLRL",
  "FFFFBBFRLL",
  "BFBBFFFRLR",
  "BFFFBBBRLR",
  "FFBBBFBLLR",
  "BFFFBFBRRR",
  "BFFBFBBLRL",
  "FFBFBFBLRR",
  "FBBBBFBRRR",
  "FFBFBFFLLR",
  "BBFFFFFLLR",
  "FBBBFBFRRR",
  "BBFFFFBRRL",
  "FBFBFBBLRL",
  "BFBBBFFLLR",
  "BBFFBBFLRL",
  "BFBFFBBRLR",
  "FBFBBBFRRL",
  "FBBBFFBRLL",
  "BBFFFFBLLR",
  "FFBBFBBLRR",
  "FBBBBBBRLR",
  "FFFFBBBRRL",
  "FBFBBBBRLR",
  "BBFFBFFRRL",
  "FBBBFFBLRL",
  "FFBBBFBLRR",
  "BFBFBBBRLL",
  "FBFFFBBLRL",
  "FBFBBBBRLL",
  "BBFFFBBLLL",
  "BFBBFFBLLL",
  "BFFBBBBRRR",
  "FBFBFFBLLL",
  "FBFBFBFRRL",
  "FBBFFFBLLL",
  "BBFFFBFRLR",
  "FBBBBFFLRR",
  "FBFFFBBRLL",
  "FFBBFBFRRR",
  "FBFFFFFLRR",
  "BFBFFBBLRR",
  "FFBFBFFRRR",
  "BFBFFBBRLL",
  "FBBFFFFRRL",
  "BFFBBFBRLL",
  "BFFFFFBLLR",
  "FBFBBFBLLR",
  "BFFBBFBRLR",
  "BFFBFBFRRR",
  "FFBFBBFRLL",
  "FFFBBBBLRR",
  "BFFFBFBLLR",
  "FBBBBFBLRL",
  "FBFBBFFLRL",
  "FFFBFFFRLL",
  "BFFFFBBRRL",
  "FBBFFFBRRR",
  "FBBFBFFLLR",
  "BFBBBBBRRR",
  "BFFBFBFRLL",
  "FFBFBBFRRL",
  "BFBFBFBLLR",
  "FFBFBBFLLR",
  "FFBFFFFLRR",
  "FBBBFBBRRL",
  "BFFBFBFRLR",
  "BFFBFFBRRL",
  "BFBBBFBRLR",
  "BBFFFFBLRL",
  "FBBBFFBRRL",
  "FBFFFBBRRL",
  "FBBBBBBLLL",
  "FFFBFFBLLL",
  "BFBBFBFRLL",
  "FBFBFFBRLR",
  "FFFFBBBRRR",
  "BBFFFBBRLR",
  "BFBBBBFRLR",
  "FBFFBBFLRR",
  "BFFFBFFRLR",
  "FFFBBBBLLR",
  "FBFFFFBLRR",
  "FBFBFBBRLL",
  "FBFFBBBRLR",
  "BFFFFFFLRR",
  "FBFFFFFRLL",
  "FFBFBFFRLL",
  "FFFBBFFRLR",
  "FBBFBFFRRL",
  "FBBBBBBRRR",
  "BFBFBBBLRL",
  "BBFFFFBRRR",
  "FFBFFBBLRL",
  "FBBBBBBLLR",
  "FFBBFFFLRL",
  "FBBBFBBLRR",
  "FFBBBBBRLR",
  "BFBFFFFLLR",
  "BFFBBBBRLL",
  "BFBFBFFLRL",
  "FBBFFFBLRL",
  "BFBFBBBRRL",
  "BFBFBFBLRL",
  "BFBBFBFLRR",
  "BFFFFBFRLR",
  "BFFFBFBRLL",
  "FBFBFBFLLL",
  "FBFFBFFLRL",
  "BFFFFFFRRL",
  "FBBFBFFRLR",
  "FFBBBFFLLR",
  "FBBBBFFLRL",
  "FBBBFBBRLR",
  "BFBBBFFLRL",
  "FBFFBBBLRL",
  "BFFFFBFRRL",
  "BFFFBFFLRR",
  "FFBFBBFLRL",
  "BFBFFFBLRL",
  "BFFFFFBLLL",
  "FBFFBFBLLL",
  "FBFBBBBRRL",
  "FBBFFBBRLR",
  "BFFFBBFRRL",
  "BFBBFBBRLR",
  "FFFBFBBLRR",
  "FFFBFBFRLR",
  "FBFBFBFRLR",
  "BFBFBBBRLR",
  "BFFFFBBLLL",
  "BFFBBFBRRR",
  "BFFBBBFLLL",
  "FFBBBFFRRL",
  "BFBBBFBLLR",
  "FBBFFBBLLR",
  "FBBFBBFLRL",
  "BFFFFFBRRR",
  "FBBBFBBRLL",
  "FBFBFFBRRR",
  "BFFBBBFRRR",
  "FBBBBBBLRL",
  "FFBBBFFLRR",
  "BFFBBBFRLL",
  "BBFFBBFRLL",
  "FBBFBBFRLR",
  "BFBFBFFRRR",
  "BFBFBBFLRL",
  "BFFFFBFRLL",
  "FFBBFBFLLR",
  "BFFBFBBLRR",
  "FBFFBBBRRL",
  "FBBFBBFRLL",
  "FBFFFBBLLR",
  "FFFBBBBRRR",
  "FFFFBBBLRL",
  "FFBBFFFRRL",
  "BFFBBFFRRL",
  "BFFFBBFLRL",
  "BFFFFBBLRR",
  "BBFFBBBLRR",
  "BFBFFFFLRR",
  "FBFBBBBLLL",
  "BBFFFBBLRR",
  "FFFBFBFLRR",
  "FBBFFFFLRL",
  "FFBBBBFRLL",
  "FBFFBFBLRL",
  "BFBBFBBLLL",
  "FBBFBBFLLL",
  "FFBFFBBRLL",
  "BFBFFFFRLR",
  "FBFFBBFRRR",
  "FFFBBFFRRR",
  "FFFBFFBRLR",
  "FBBBBBFLLL",
  "FBBBFFFLRL",
  "FFBBFFFLRR",
  "FFFBBBBRRL",
  "BFBFBBFRLL",
  "BFBFFBBRRL",
  "FBBFBBFRRL",
  "BFBFBBFLLR",
  "BBFFBBBRRR",
  "BFFFBBFRLR",
  "FFFBBBFRLR",
  "BFFBFFFRLL",
  "BFBFFFFRRL",
  "FFBBFFFLLL",
  "FBFBBBBLRR",
  "FBFBFFFLRR",
  "BBFFBFFLRR",
  "FBBBFBBLRL",
  "BFBFBFBLLL",
  "FBFBFFFLLR",
  "BFFBBFBLRR",
  "FBBFFFBRRL",
  "BFFBBFFRRR",
  "FBBFBBBRRL",
  "BFFFFBBLLR",
  "FFBBBBFLLL",
  "BFFBFFBRRR",
  "BFFFFBFRRR",
  "FFFBBBFRRR",
  "FBFBFFFRLR",
  "FBBBFBFLLR",
  "FFBBFFBRLL",
  "FBFBFFFLLL",
  "BFFBFBFRRL",
  "BFBFFBFRRL",
  "BFBBBBFLLL",
  "FBBBFBFRRL",
  "FFBFBFFLLL",
  "BFBBFFFRRL",
  "FFBBFFBLLR",
  "BFFBBBBRLR",
  "FFBBBBBLRR",
  "BFFBFFFRRL",
  "BFFBFBBRLL",
  "FBBBFBFRLR",
  "FBBFFFFLRR",
  "BFFFBBFLLR",
  "FFFBBFBRRL",
  "FFBBFFBLRR",
  "FBBFFFBRLR",
  "BFBBBBBRLL",
  "BBFFFFFRRL",
  "FFBFFBBRRL",
  "BFBFFBFLLR",
  "FBFBBBFLLL",
  "FBFFFFFRRL",
  "BFFFBFBLRR",
  "FBFFFFBLLR",
  "FBBFBFBRRR",
  "FBBBFFFLLR",
  "BBFFBFBLRR",
  "BBFFFBFLLL",
  "FBFFFBFRLR",
  "BFFFBFFLRL",
  "BBFFBFFLRL",
  "BFFFFFFLLR",
  "BBFFBBBLLL",
  "FFBFBBBLLR",
  "FBBFBBBLRL",
  "BFBBFBBLRR",
  "FFBFBFBLLR",
  "FFBFBFBRRL",
  "BFBBFBBRRL",
  "BFFBFFFLLR",
  "FFBBFFBRRL",
  "BBFFBBBRRL",
  "FFFBBFBRLR",
  "BFBBFBFRRR",
  "BFFFFFFRRR",
  "FBBBFFBLLL",
  "BFBFFFFLLL",
  "BBFFBFBLLR",
  "BFBFBBFRLR",
  "FFBFBBBRRR",
  "BFFFBBFLLL",
  "FBFFBBFRLL",
  "FFBBFBFRLL",
  "BFBFBBBLLR",
  "FBBFBFBLLL",
  "BBFFFFBRLL",
  "BBFFBFBLLL",
  "BFFBFFBLRR",
  "BFFBBFBLLL",
  "FFBFFFBLRR",
  "FBBFFBFRRL",
  "FBBBBFBLLL",
  "FFBFFBBLLR",
  "BFFBBBFLRR",
  "FBFBFFBRLL",
  "FFBFFFBRLL",
  "FFBFFBFLLL",
  "FBFBBFBLRL",
  "FBBFBFFRRR",
  "BFBFBFFLLR",
  "FBBFFFBLLR",
  "BFBBBBFRRR",
  "FBBFBBFRRR",
  "BBFFBFFRLR",
  "FBFBBBFRLL",
  "FBBFBBBLLR",
  "BFFFFFFLRL",
  "BFBFFBBRRR",
  "BFFFBFFRLL",
  "BFBBFBFLRL",
  "FFBFFFFRRR",
  "BFFBBFFRLR",
  "FBBBBBFLLR",
  "FBFBFFBLRL",
  "FFFBBFBLLR",
  "FBBFBFBLLR",
  "FFFBFFBRRR",
  "FBFFFFFRLR",
  "FBFBBFBRLR",
  "FBBBFBFLRR",
  "FBFBBBFLRL",
  "BFFBFFFLRL",
  "FFBBBFFRRR",
  "FFBBBBBLLL",
  "FBFFBBFLLR",
  "FFBFBFFLRR",
  "FFFBBBFLRR",
  "BFBFBBFLLL",
  "BBFFBFFLLR",
  "FFBBFBBRLL",
  "FBBFFBBLLL",
  "FBFFBFBRLL",
  "BFBFBFFLRR",
  "FBBBFFBRLR",
  "FFBFFBFRLL",
  "FFFFBBBLLL",
  "FFBFFBBRRR",
  "FBBBBFBRLL",
  "BFFFFBBRRR",
  "FFBBFFFRLL",
  "FFBFBFBRLL",
  "BBFFFFBLLL",
  "FFBBBFBRRL",
  "BFFFFBBLRL",
  "FBBBFBBLLR",
  "FBBBFBBLLL",
  "FFBFBFBLRL",
  "FBBBBFFRRR",
  "FBBFFFFRLR",
  "FFBFFFBRLR",
  "BFBFBFBRRR",
  "FFFBFBBRLL",
  "FBBBFFBRRR",
  "FBBFBFFRLL",
  "BFFBFBFLRR",
  "BFBBBFFRRL",
  "BFFBBFBLLR",
  "FFBBBFBRLL",
  "FBFBFBBLRR",
  "BFBBFFFLRL",
  "BFBFBBFLRR",
  "BFBBBFFRRR",
  "FBBBFFFRRL",
  "FBFBFBFLLR",
  "FBBFFFFLLR",
  "FFBFBBFRLR",
  "FFFBFBBLRL",
  "BBFFFBBLLR",
  "BFFBBBFRLR",
  "FFFFBBBRLR",
  "BBFFBBFRLR",
  "FBFFFFBRLL",
  "FBFBFFFRRR",
  "FBFFFBBLLL",
  "BFBBBBFRLL",
  "FBFBFFBRRL",
  "FFFBFFFRLR",
  "BFBBFBFRRL",
  "FBFFBFFLRR",
  "FBFFFBBLRR",
  "FFBFBBBRLR",
  "FBBFBFFLRR",
  "FBFFFBBRRR",
  "FFBFBBBRLL",
  "FFBBBBBRRR",
  "BFFBBFFLLL",
  "BFBBBBBRRL",
  "BBFFBBBRLL",
  "FBFFFFFLRL",
  "BFFBBFFLRR",
  "FBFFBBFLRL",
  "BFBFFBFRRR",
  "FBFBBFBRLL",
  "BFFFBFBRRL",
  "FBBFFBFLLR",
  "BFFFFFFLLL",
  "FBFBFBFRLL",
  "FBBBBFFRRL",
  "BFBFFBBLLR",
  "FBBFBFBRRL",
  "FFFBFFFLLR",
  "FFBBBBBLRL",
  "FFBFFBBLRR",
  "FFFBFBFRRR",
  "BFBBFBBRLL",
  "BFBBBFBLRR",
  "FFBBBBFLRR",
  "FBBBFFBLLR",
  "BBFFBBBLLR",
  "FBFBBFFRRL",
  "FBBBBBFLRL",
  "FFFBBFFRRL",
  "BFFBBBBLRR",
  "FFFFBBBLRR",
  "FFFFBBFLRR",
  "FBFFFBFLLL",
  "FBFBFBBLLR",
  "BFFBBBBLLL",
  "FFBFFFFRLR",
  "BFBBFFBLRR",
  "FFBBFBFLRL",
  "BFBFBFFLLL",
  "BFFBFBBLLR",
  "BFBBFBBLRL",
  "FFBBBBFLRL",
  "FBBBFFFLLL",
  "FFFBFFBRRL",
  "BFFFFBBRLL",
  "BFFFBBBRLL",
  "BFFBFFFLRR",
  "FFBFBFBRRR",
  "BBFFBBFLLR",
  "FFBBFBBLLR",
  "FFBFFBFRRR",
  "FFBBBFFRLR",
  "BFFBBBBLLR",
  "FFFBFFFLRR",
  "FBFFFFFLLR",
  "FBFFBBBLLL",
  "BBFFBBFLLL",
  "FFBBFBFLRR",
  "BFFBFBFLRL",
  "FBFBBBFRRR",
  "BFBBFBBLLR",
  "FBFFFFBRRL",
  "FFFBBFBLRR",
  "BBFFFFBLRR",
  "BFBBBBFRRL",
  "FFBBBFBLLL",
  "BFBBFBFRLR",
  "BFBBFFBRRL",
  "BFBFBFFRRL",
  "FBBFFBBLRL",
  "FFFBFFBLRL",
  "BFFBBFFRLL",
  "FBBBFFFRLL",
  "FBBFBBFLLR",
  "FFBFFFFLLR",
  "FBBBFBFLRL",
  "BFFFBBBLLR",
  "FBFBBBBRRR",
  "FBBFBFBRLR",
  "FFFBFBFLLR",
  "FFFFBBFRRR",
  "FFFBBFFLRL",
  "BFBFFBFRLL",
  "FFFBFFBLLR",
  "FBBFFFBRLL",
  "FFBBBFBRRR",
  "FFBBFBBRLR",
  "BBFFFFFRRR",
  "FFBFFFFRLL",
  "FBBFFBBRRL",
  "BBFFFBFLRR",
  "FBBFFFFRRR",
  "FFBFFFBRRL",
  "BFBBFBFLLL",
  "BFFFFBFLRR",
  "BBFFFFFLLL",
  "FFBBFBBRRL",
  "FFBFBFFLRL",
  "FBFFBBFRRL",
  "BBFFBFBRLR",
  "BBFFBBFLRR",
  "FBFFBFBRRR",
  "FBBFBBFLRR",
  "FBFFFBFRLL",
  "BFBFFFFLRL",
  "FFFBBFBRRR",
  "BFBBBBBLLR",
  "FBBFFBBRRR",
  "FFBBBFFLLL",
  "FBBBBFBLLR",
  "BBFFFFFRLL",
  "FFBBBBFRLR",
  "FBFBFBBRRR",
  "FBFFBFFLLL",
  "FBFFBBBLLR",
  "FBBBBFBRRL",
  "BFBFBFFRLR",
  "FBBFBBBRLL",
  "BFBBFFFRLL",
  "FBBBFBFLLL",
  "FFBFFFFRRL",
  "FBFBBFFRRR",
  "FBFFFFBLLL",
  "FBBBBBBRLL",
  "BFFBFBBRRR",
  "BBFFBBFRRL",
  "FBBFBFFLRL",
  "FBFFFFBRRR",
  "FBBFFFFRLL",
  "FFFBFFFRRR",
  "FBFFBBFLLL",
  "BFFFFBFLLL",
  "BFFFFBFLLR",
  "FFBFFBFLLR",
  "FFBFFBFLRR",
  "BFFBBBBLRL",
  "FFBBFFBLLL",
  "FBBFBBBLLL",
  "FBFBBBFLLR",
  "BFFBBBFLRL",
  "BFBBFFBRLL",
  "FBFFBFFRRR",
  "FFBFFFBLRL",
  "FFFBBBFRRL",
  "FFBFBBFLRR",
  "FFFBBBBLRL",
  "FFFBBFFLLL",
  "FFFBFBBRRR",
  "FBBFBFFLLL",
  "BFFFBBBLLL",
  "BFFBFFFRLR",
  "FFFBBBBLLL",
  "BFFFFFBRRL",
  "FFBBFFFLLR",
  "BFBBFFFRRR",
  "BFBFFBFLRR",
  "FFFBBBFLLR",
  "FBFBBBFLRR",
  "BBFFBBBRLR",
  "FBFBBFFLRR",
  "FFBBBFBLRL",
  "FFFBBBFRLL",
  "BFFBFFBRLR",
  "BBFFFBBRRR",
  "BFBBBBFLRL",
  "BFBBBFBRRR",
  "FBBBBFFLLL",
  "FFFBFBBLLL",
  "BBFFFFFRLR",
  "BBFFBFFLLL",
  "FFBFBBBLRL",
  "FFBBFBFRLR",
  "BFBBBBBLRR",
  "FFBFFFBLLR",
  "FFBFFBFLRL",
  "BFFBFBBRLR",
  "FBFBFFFRRL",
  "FBBBFFFLRR",
  "FFFBBFFLLR",
  "FBBBBFFRLR",
  "FFBBFBBRRR",
  "BFBBFBBRRR",
  "BFBFBBFRRL",
  "BFFBBBFRRL",
  "FFFBFFFLLL",
  "FBBFFBFLRL",
  "FFFBFBBRLR",
  "BFBBFFFLLR",
  "BFBBFFBRRR",
  "FBFFBFBRRL",
  "FFBBBBBRLL",
  "BFFBFFBLLL",
  "BFFFBBFRRR",
  "FBFFFBFRRR",
  "FFBFBFBRLR",
  "FBFBBFFLLR",
  "FBBFBBBRRR",
  "BFBFFFFRRR",
  "FFBFFFFLLL",
  "FBFBBFFRLL",
  "BFBFFBFLRL",
  "BFBBFFFLLL",
  "FBFBBFBRRR",
  "BFBFFFBLLR",
  "BFBFFFBLLL",
  "BBFFFBFLLR",
  "BBFFBFFRLL",
  "FFBBBBFRRL",
  "BBFFFBFLRL",
  "BBFFBBBLRL",
  "BFBFFFBLRR",
  "FFFBFBFRLL",
  "BFBFFBBLLL",
  "BBFFFBBRRL",
  "BFBBBFFLLL",
  "BFFBBFFLLR",
  "FFBFFBBLLL",
  "BFFBBFBRRL",
  "BFFFFFBLRL",
  "BBFFFFBRLR",
  "FBFBBFFLLL",
  "FFBBBFBRLR",
  "FFFBBFBLLL",
  "FBFFFBBRLR",
  "FFBFBFFRLR",
  "BFFFFFBLRR",
  "FFFBBBBRLL",
  "FFBBFFFRRR",
  "BFFFFFBRLR",
  "FBBBFFBLRR",
  "FBFBFBBRLR",
  "FBBFFFBLRR",
  "BFBFFBBLRL",
  "FBFFBFBRLR",
  "FBFBFFFLRL",
  "BFFFFFBRLL",
  "BFBBBBFLRR",
  "BFFBFFFLLL",
  "FBFFBFFRRL",
  "FFFBBFFRLL",
  "BFFFBFFRRR",
  "FBFFBFFLLR",
  "FFFBBBFLLL",
  "FBFFFBFLRR",
  "BFFBFBBLLL",
  "BFFFBBBLRR",
  "FBBBBBBRRL",
  "FBFFBFFRLR",
  "FBBFFBBRLL",
  "FBBBFFFRRR",
  "BFFBFBBRRL",
  "FFBBFFBRRR",
  "BFBBBFFLRR",
  "FFFBFBBRRL",
  "BFBFBBBLRR",
  "FFFBBFBLRL",
  "FBFFBBFRLR",
  "BFFFBBFLRR",
  "BBFFFBBLRL",
  "FBBFFBFRLR",
  "FFFBFBFLLL",
  "FFFBFFFRRL",
  "BBFBFFFLLL",
  "FBFBFBFLRR",
  "BFBFFFFRLL",
];

let input2, input3 = [];

for (let i = 0; i < input.length; i++) {
    input2.push(input[i].substring(0,7));
    input3.push(input[i].substring(7,10));
}

let output1, output2 = [];

for(let i = 0 ; i < input2.length; i++) {
    let front = 0;
    let back = 127;

    for(let j = 0; j < input2.length; j++) {
        if(input2[i][j] == 'F'){
            back = Math.floor((front + back)/2);
        }else {
            front = Math.ceil((front + back)/2);
        }
    }
    output1.push(front);
}

for(let i = 0 ; i < input3.length; i++) {
    let left = 0;
    let right = 8;

    for(let j = 0; j < input3.length; j++) {
        if(input3[i][j] == 'L'){
            right = Math.floor((right + left)/2);
        }else {
            left = Math.ceil((right + left)/2);
        }
    }
    output2.push(left);
}

let grid = [];
for (let i = 0; i < input.length; i++){
    grid.push(output1[i] * 8 + output2[i]);
}

let lowNum, highNum = grid[0];

grid.forEach((spot)=>{
    if(spot < lowNum){
        lowNum = spot;
    }
    if(spot > highNum){
        highNum = spot;
    }
});

let missing;
grid.sort((a, b)=> a-b);
grid.every((num, index)=>{
    let nextNum = 51 + index;
    if(num !== nextNum){
        missing = nextNum;
        return false;
    }
    return true;
});

let findLetterCode = (spot) => {
    let row = Math.floor(spot/8);
    let column = spot % 8;

    let code = "";

    for(let i = 6; i >= 0; i--){
        let bit = (row >> i) & 1;
        code += (bit === 0 ? "B" : "F");
    }
    
    for(let i = 2; i >= 0; i--){
        let bit = (column >> i) & 1;
        code += (bit === 0 ? "L" : "R");
    }

    return code;
};

let spot = 517;
let letterCode = findLetterCode(spot);

let rows, cols = [];

for(let i = 0; i < grid.length; i++){
    let row = Math.floor(grid[i]/8);
    let col = grid[i] % 8;

    rows.push(row);
    cols.push(col);
}

let totalRow = rows.reduce((accumulator, currentNumber) => accumulator + currentNumber, 0);
let totalCol = cols.reduce((accumulator, currentNumber) => accumulator + currentNumber, 0);

let totalGrid = `${totalCol * totalRow}`.split("0").join("");

let results = [lowNum, highNum, missing, letterCode, totalGrid].forEach(result =)